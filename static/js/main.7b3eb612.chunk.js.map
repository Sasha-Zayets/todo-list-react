{"version":3,"sources":["components/TaskItem/taskItem.module.scss","components/TodoContainer/TodoContainer.module.scss","components/Header/header.module.scss","components/Title/Title.module.scss","components/TextField/TextField.module.scss","components/Button/Button.module.scss","components/TaskList/taskList.module.scss","components/Header/Header.js","components/Title/Title.js","components/TextField/TextField.js","components/Button/Button.js","components/TaskItem/TaskItem.js","components/TaskList/TaskList.js","components/TodoContainer/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","classes","header","header__title","React","Component","Title","title","TextField","textField","onChange","this","onChangeField","placeholder","value","Button","styles","marginLeft","buttonClass","button","style","onClick","addEventClick","TaskItem","checkedClass","task","done","item","taskItem__done","taskItem","taskItem__checkbox","type","checked","onDone","bind","id","taskItem__name","join","name","taskItem__events","taskItem__delete","onDeleteElement","TaskList","list","taskList","listTask","map","index","key","TodoContainer","addPost","valueField","state","nameTask","myTask","tasks","length","push","setState","onChangeValue","event","target","deleteElement","myNewTask","splice","doneTask","changeTask","Fragment","todoContainer","wrapper","flex","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,iBAAmB,mCAAmC,mBAAqB,qCAAqC,eAAiB,iCAAiC,eAAiB,iCAAiC,iBAAmB,qC,gBCA/RD,EAAOC,QAAU,CAAC,QAAU,+BAA+B,cAAgB,qCAAqC,KAAO,8B,gBCAvHD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,cAAgB,gC,kBCAlED,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,SAAW,6B,4OCERC,E,YACjB,WAAaC,GAAQ,uE,sEAKjB,OACI,4BAAQC,UAAWC,IAAQC,QACvB,0BAAMF,UAAWC,IAAQE,eAAzB,kB,GARoBC,IAAMC,W,iBCI3BC,EAJD,kBACV,wBAAIN,UAAWO,IAAMA,OAArB,c,iBCgBWC,E,YAhBX,WAAaT,GAAQ,uE,sEAKjB,OACI,yBAAKC,UAAWS,IAAUA,WACtB,2BACIC,SAAUC,KAAKZ,MAAMa,cACrBC,YAAaF,KAAKZ,MAAMc,YACxBC,MAAOH,KAAKZ,MAAMe,a,GAXdV,IAAMC,W,iBCATU,E,YACjB,WAAahB,GAAQ,uE,sEAKjB,IAAMiB,EAAS,CACXC,WAAYN,KAAKZ,MAAMkB,WAAa,MAGxC,OACI,4BACIjB,UAAWkB,IAAYC,OACvBC,MAAOJ,EACPK,QAASV,KAAKZ,MAAMuB,eAHxB,gB,GAXwBjB,a,iCCAfkB,E,YACjB,WAAaxB,GAAQ,uE,sEAIV,IAAD,OACAyB,EAAeb,KAAKZ,MAAM0B,KAAKC,KAAOC,IAAKC,eAAiB,GAElE,OACI,yBAAK5B,UAAW2B,IAAKE,UACjB,yBAAK7B,UAAW2B,IAAKG,oBACjB,2BAAOC,KAAK,WAAWC,QAASrB,KAAKZ,MAAM0B,KAAKC,KAAMhB,SAAUC,KAAKZ,MAAMkC,OAAOC,KAAKvB,KAAMA,KAAKZ,MAAM0B,KAAKU,OAEjH,yBAAKnC,UAAW,CAAC2B,IAAKS,eAAgBZ,GAAca,KAAK,MACnD1B,KAAKZ,MAAM0B,KAAKa,MAEtB,yBAAKtC,UAAW2B,IAAKY,kBACjB,0BACIvC,UAAW2B,IAAKa,iBAChBnB,QAAS,kBAAM,EAAKtB,MAAM0C,gBAAgB,EAAK1C,MAAM0B,KAAKU,MAC7D,uBAAGnC,UAAU,0B,GApBII,IAAMC,WCEvBqC,E,YACjB,WAAa3C,GAAQ,uE,sEAIV,IAAD,OACN,OACI,yBAAKC,UAAW2C,IAAKC,UACfjC,KAAKZ,MAAM8C,SAASC,KAAI,SAACrB,EAAMsB,GAC7B,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLtB,KAAMA,EACNgB,gBAAiB,EAAK1C,MAAM0C,gBAC5BR,OAAQ,EAAKlC,MAAMkC,iB,GAdT7B,IAAMC,WCyF7B4C,E,YApFX,WAAalD,GAAQ,IAAD,8BAChB,+CAQJmD,QAAU,WACN,IAAMC,EAAa,EAAKC,MAAMC,SACxBC,EAAM,YAAO,EAAKF,MAAMG,OAE1BJ,EAAWK,OAAS,IACpBF,EAAOG,KAAK,CACRtB,GAAImB,EAAOE,OACXlB,KAAMa,EACNzB,MAAM,IAGV,EAAKgC,SAAS,CACVH,MAAOD,EACPD,SAAU,OAtBF,EA2BpBM,cAAgB,SAACC,GACb,IAAM9C,EAAQ8C,EAAMC,OAAO/C,MAE3B,EAAK4C,SAAS,CACVL,SAAUvC,KA/BE,EAmCpBgD,cAAgB,SAAC3B,GACd,IAAM4B,EAAY,EAAKX,MAAMG,MAE7BQ,EAAUC,OAAO7B,EAAI,GAErB,EAAKuB,SAAS,CACVH,MAAOQ,KAzCM,EA6CpBE,SAAW,SAAC9B,GACR,IAAMV,EAAO,EAAK2B,MAAMG,MAClBW,EAAazC,EAAKU,GAExB+B,EAAWxC,MAAQwC,EAAWxC,KAC9BD,EAAKU,GAAM+B,EAEX,EAAKR,SAAS,CACVH,MAAO9B,KAlDX,EAAK2B,MAAQ,CACTC,SAAU,GACVE,MAAO,IALK,E,sEA0DhB,OACI,kBAAC,IAAMY,SAAP,KACI,kBAAC,EAAD,MACA,yBAAKnE,UAAWoE,IAAcC,SAC1B,yBAAKrE,UAAWoE,IAAcnB,eAC1B,kBAAC,EAAD,MACA,yBAAKjD,UAAWoE,IAAcE,MAC1B,kBAAC,EAAD,CACI1D,cAAeD,KAAKgD,cACpB9C,YAAY,WACZC,MAAOH,KAAKyC,MAAMC,WACtB,kBAAC,EAAD,CAAQpC,WAAY,GAAIK,cAAeX,KAAKuC,YAIpD,kBAAC,EAAD,CACIL,SAAUlC,KAAKyC,MAAMG,MACrBd,gBAAiB9B,KAAKmD,cACtB7B,OAAQtB,KAAKsD,iB,GA7ET7D,IAAMC,WCCnBkE,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7b3eb612.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskItem\":\"taskItem_taskItem__8hRjb\",\"taskItem__events\":\"taskItem_taskItem__events__2SEBX\",\"taskItem__checkbox\":\"taskItem_taskItem__checkbox__1Vbqn\",\"taskItem__name\":\"taskItem_taskItem__name__2-xbU\",\"taskItem__done\":\"taskItem_taskItem__done__2n6s7\",\"taskItem__delete\":\"taskItem_taskItem__delete__bsakb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoContainer_wrapper__3fFGC\",\"TodoContainer\":\"TodoContainer_TodoContainer__3918G\",\"flex\":\"TodoContainer_flex__1xBjO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__3fn4i\",\"header__title\":\"header_header__title__2lBLG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1jPs1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textField\":\"TextField_textField__3ghkn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskList\":\"taskList_taskList__4OS-v\"};","import React from 'react';\nimport classes from './header.module.scss';\n\nexport default class Header extends React.Component {\n    constructor (props) {\n        super();\n    }\n\n    render () {\n        return (\n            <header className={classes.header}>\n                <span className={classes.header__title}>ToDo List</span>\n            </header>\n        )\n    }\n}","import React from 'react';\nimport title from './Title.module.scss';\n\nconst Title = () => (\n    <h1 className={title.title}>ToDo List</h1>\n);\n\nexport default Title;","import React from 'react';\nimport textField from './TextField.module.scss';\n\nclass TextField extends React.Component {\n    constructor (props) {\n        super();\n    }\n\n    render () {\n        return (\n            <div className={textField.textField}>\n                <input \n                    onChange={this.props.onChangeField} \n                    placeholder={this.props.placeholder}\n                    value={this.props.value}/>\n            </div>\n        )\n    }\n} \n\nexport default TextField;","import React, {Component} from 'react';\nimport buttonClass from './Button.module.scss';\n\nexport default class Button extends Component {\n    constructor (props) {\n        super();\n    }\n\n    render () {\n        const styles = {\n            marginLeft: this.props.marginLeft + 'px'\n        }\n\n        return (\n            <button \n                className={buttonClass.button} \n                style={styles}\n                onClick={this.props.addEventClick}\n            >Add post</button>\n        )\n    }\n}","import React from 'react';\nimport item from './taskItem.module.scss';\n\nexport default class TaskItem extends React.Component {\n    constructor (props) {\n        super();\n    }\n\n    render () {\n        const checkedClass = this.props.task.done ? item.taskItem__done : '';\n\n        return (\n            <div className={item.taskItem}>\n                <div className={item.taskItem__checkbox}>\n                    <input type=\"checkbox\" checked={this.props.task.done} onChange={this.props.onDone.bind(this, this.props.task.id)}/>\n                </div>\n                <div className={[item.taskItem__name, checkedClass].join(' ')}>\n                    { this.props.task.name }\n                </div>\n                <div className={item.taskItem__events}>\n                    <span \n                        className={item.taskItem__delete}\n                        onClick={() => this.props.onDeleteElement(this.props.task.id)}\n                    ><i className=\"fa  fa-trash-o\"></i></span>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport list from './taskList.module.scss';\n\nimport TaskItem from '../TaskItem/TaskItem';\n\nexport default class TaskList extends React.Component {\n    constructor (props) {\n        super();\n    }\n\n    render () {\n        return (\n            <div className={list.taskList}>\n                { this.props.listTask.map((task, index) => {\n                    return (\n                        <TaskItem \n                            key={index} \n                            task={task} \n                            onDeleteElement={this.props.onDeleteElement} \n                            onDone={this.props.onDone}/>\n                    )\n                })}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport todoContainer from './TodoContainer.module.scss';\n\nimport Header from '../Header/Header';\nimport Title from '../Title/Title';\nimport TextField from '../TextField/TextField';\nimport Button from '../Button/Button';\nimport TaskList from '../TaskList/TaskList';\n\nclass TodoContainer extends React.Component {\n    constructor (props) {\n        super();\n\n        this.state = {\n            nameTask: '',\n            tasks: []\n        }\n    }\n\n    addPost = () => {\n        const valueField = this.state.nameTask;\n        const myTask = [...this.state.tasks];\n\n        if (valueField.length > 0) {\n            myTask.push({\n                id: myTask.length,\n                name: valueField,\n                done: true\n            })\n\n            this.setState({\n                tasks: myTask,\n                nameTask: ''\n            })\n        }\n    }\n\n    onChangeValue = (event) => {\n        const value = event.target.value;\n\n        this.setState({\n            nameTask: value\n        })\n    }\n\n    deleteElement = (id) => {\n       const myNewTask = this.state.tasks;\n\n       myNewTask.splice(id, 1);\n\n       this.setState({\n           tasks: myNewTask\n       })\n    }\n\n    doneTask = (id) => {\n        const task = this.state.tasks;\n        const changeTask = task[id];\n\n        changeTask.done = !changeTask.done;\n        task[id] = changeTask;\n\n        this.setState({\n            tasks: task\n        })\n    }\n\n    render () {\n        return (\n            <React.Fragment>\n                <Header />\n                <div className={todoContainer.wrapper}>\n                    <div className={todoContainer.TodoContainer}>\n                        <Title />\n                        <div className={todoContainer.flex}>\n                            <TextField \n                                onChangeField={this.onChangeValue} \n                                placeholder=\"New Task\"\n                                value={this.state.nameTask}/>\n                            <Button marginLeft={10} addEventClick={this.addPost} />\n                        </div>\n                    </div>\n\n                    <TaskList \n                        listTask={this.state.tasks} \n                        onDeleteElement={this.deleteElement}\n                        onDone={this.doneTask}    \n                    />\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default TodoContainer;","import React from 'react';\nimport './App.css';\nimport TodoContainer from './components/TodoContainer/TodoContainer';\n\nfunction App() {\n  return (\n    <TodoContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}