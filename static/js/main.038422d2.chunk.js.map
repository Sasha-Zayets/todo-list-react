{"version":3,"sources":["components/TaskItem/taskItem.module.scss","components/TodoContainer/TodoContainer.module.scss","components/Header/header.module.scss","components/Title/Title.module.scss","components/TextField/TextField.module.scss","components/Button/Button.module.scss","components/TaskList/taskList.module.scss","components/Header/Header.js","components/Title/Title.js","components/TextField/TextField.js","components/Button/Button.js","components/TaskItem/TaskItem.js","components/TaskList/TaskList.js","components/TodoContainer/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","classes","header","header__title","React","Component","Title","title","TextField","textField","onChange","this","onChangeField","placeholder","value","Button","styles","marginLeft","buttonClass","button","style","onClick","addEventClick","TaskItem","editValue","event","target","setState","editFieldValue","fadeEditBlock","showTaskItem","confirmEditBlock","newValue","state","id","task","length","onEditElement","error","setTimeout","editItem","valueEdit","name","checkedClass","done","item","taskItem__done","Fragment","taskItem","taskItem__checkbox","type","checked","onDone","bind","taskItem__name","join","taskItem__events","taskItem__edit","taskItem__delete","onDeleteElement","edit","edit__field","edit__error","edit__errorShow","edit__events","edit__close","edit__confirm","TaskList","list","taskList","listTask","map","index","key","TodoContainer","addPost","valueField","nameTask","myTask","tasks","push","onChangeValue","deleteElement","myNewTask","splice","doneTask","changeTask","editElement","todoContainer","wrapper","flex","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,iBAAmB,mCAAmC,mBAAqB,qCAAqC,eAAiB,iCAAiC,eAAiB,iCAAiC,eAAiB,iCAAiC,iBAAmB,mCAAmC,KAAO,uBAAuB,YAAc,8BAA8B,aAAe,+BAA+B,YAAc,8BAA8B,cAAgB,gCAAgC,YAAc,8BAA8B,gBAAkB,oC,qBCAtoBD,EAAOC,QAAU,CAAC,QAAU,+BAA+B,cAAgB,qCAAqC,KAAO,8B,gBCAvHD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,cAAgB,gC,kBCAlED,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,SAAW,6B,4OCERC,E,YACjB,WAAaC,GAAQ,uE,sEAKjB,OACI,4BAAQC,UAAWC,IAAQC,QACvB,0BAAMF,UAAWC,IAAQE,eAAzB,kB,GARoBC,IAAMC,W,iBCI3BC,EAJD,kBACV,wBAAIN,UAAWO,IAAMA,OAArB,c,iBCgBWC,E,YAhBX,WAAaT,GAAQ,uE,sEAKjB,OACI,yBAAKC,UAAWS,IAAUA,WACtB,2BACIC,SAAUC,KAAKZ,MAAMa,cACrBC,YAAaF,KAAKZ,MAAMc,YACxBC,MAAOH,KAAKZ,MAAMe,a,GAXdV,IAAMC,W,iBCATU,E,YACjB,WAAahB,GAAQ,uE,sEAKjB,IAAMiB,EAAS,CACXC,WAAYN,KAAKZ,MAAMkB,WAAa,MAGxC,OACI,4BACIjB,UAAWkB,IAAYC,OACvBC,MAAOJ,EACPK,QAASV,KAAKZ,MAAMuB,eAHxB,gB,GAXwBjB,a,iCCCfkB,E,YACjB,WAAaxB,GAAQ,IAAD,8BAChB,+CASJyB,UAAY,SAACC,GACT,IAAMX,EAAQW,EAAMC,OAAOZ,MAE3B,EAAKa,SAAS,CACVC,eAAgBd,KAdJ,EAkBpBe,cAAgB,WACZ,EAAKF,SAAS,CACVG,cAAc,KApBF,EAwBpBC,iBAAmB,WACf,IAAMC,EAAW,EAAKC,MAAML,eACtBM,EAAK,EAAKnC,MAAMoC,KAAKD,GAEvBF,EAASI,OAAS,GAClB,EAAKrC,MAAMsC,cAAcH,EAAIF,GAE7B,EAAKL,SAAS,CACVG,cAAc,MAGlB,EAAKH,SAAS,CACVW,OAAO,IAGXC,YAAW,WACP,EAAKZ,SAAS,CACVW,OAAO,MAEZ,OA3CS,EA+CpBE,SAAW,WACP,IAAMC,EAAY,EAAK1C,MAAMoC,KAAKO,KAElC,EAAKf,SAAS,CACVC,eAAgBa,EAChBX,cAAc,KAjDlB,EAAKG,MAAQ,CACTL,eAAgB,GAChBE,cAAc,EACdQ,OAAO,GANK,E,sEAwDT,IAAD,OACAK,EAAehC,KAAKZ,MAAMoC,KAAKS,KAAOC,IAAKC,eAAiB,GAElE,OACI,kBAAC,IAAMC,SAAP,KACQpC,KAAKsB,MAAMH,aACT,yBAAK9B,UAAW6C,IAAKG,UACnB,yBAAKhD,UAAW6C,IAAKI,oBACjB,2BACIC,KAAK,WACLC,QAASxC,KAAKZ,MAAMoC,KAAKS,KACzBlC,SAAUC,KAAKZ,MAAMqD,OAAOC,KAAK1C,KAAMA,KAAKZ,MAAMoC,KAAKD,OAE/D,yBAAKlC,UAAW,CAAC6C,IAAKS,eAAgBX,GAAcY,KAAK,MACnD5C,KAAKZ,MAAMoC,KAAKO,MAEtB,yBAAK1C,UAAW6C,IAAKW,kBACjB,0BACIxD,UAAW6C,IAAKY,eAChBpC,QAASV,KAAK6B,UACV,uBAAGxC,UAAU,gBAErB,0BACIA,UAAW6C,IAAKa,iBAChBrC,QAAS,kBAAM,EAAKtB,MAAM4D,gBAAgB,EAAK5D,MAAMoC,KAAKD,MAC7D,uBAAGlC,UAAU,sBAIlB,yBAAKA,UAAW6C,IAAKe,MACjB,yBAAK5D,UAAW6C,IAAKgB,aACjB,kBAAC,EAAD,CACIjD,cAAeD,KAAKa,UACpBX,YAAY,WACZC,MAAOH,KAAKsB,MAAML,iBACtB,0BAAM5B,UAAW,CAAC6C,IAAKiB,YAAanD,KAAKsB,MAAMK,MAAQO,IAAKkB,gBAAkB,IAAIR,KAAK,MAAvF,8CAEJ,yBAAKvD,UAAW6C,IAAKmB,cACjB,0BACIhE,UAAW6C,IAAKoB,YAChB5C,QAASV,KAAKkB,eAEd,uBAAG7B,UAAU,iBAEjB,0BACIA,UAAW6C,IAAKqB,cAEhB7C,QAASV,KAAKoB,kBAEd,uBAAG/B,UAAU,+B,GA1GXI,IAAMC,WCCvB8D,E,YACjB,WAAapE,GAAQ,uE,sEAIV,IAAD,OACN,OACI,yBAAKC,UAAWoE,IAAKC,UACf1D,KAAKZ,MAAMuE,SAASC,KAAI,SAACpC,EAAMqC,GAC7B,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLrC,KAAMA,EACNwB,gBAAiB,EAAK5D,MAAM4D,gBAC5BtB,cAAe,EAAKtC,MAAMsC,cAC1Be,OAAQ,EAAKrD,MAAMqD,iB,GAfThD,IAAMC,WC+G7BqE,E,YA1GX,WAAa3E,GAAQ,IAAD,8BAChB,+CAcJ4E,QAAU,WACN,IAAMC,EAAa,EAAK3C,MAAM4C,SACxBC,EAAM,YAAO,EAAK7C,MAAM8C,OAE1BH,EAAWxC,OAAS,IACpB0C,EAAOE,KAAK,CACR9C,GAAI4C,EAAO1C,OACXM,KAAMkC,EACNhC,MAAM,IAGV,EAAKjB,SAAS,CACVoD,MAAOD,EACPD,SAAU,OA5BF,EAiCpBI,cAAgB,SAACxD,GACb,IAAMX,EAAQW,EAAMC,OAAOZ,MAE3B,EAAKa,SAAS,CACVkD,SAAU/D,KArCE,EAyCpBoE,cAAgB,SAAChD,GACd,IAAMiD,EAAY,EAAKlD,MAAM8C,MAE7BI,EAAUC,OAAOlD,EAAI,GAErB,EAAKP,SAAS,CACVoD,MAAOI,KA/CM,EAmDpBE,SAAW,SAACnD,GACR,IAAMC,EAAO,EAAKF,MAAM8C,MAClBO,EAAanD,EAAKD,GAExBoD,EAAW1C,MAAQ0C,EAAW1C,KAC9BT,EAAKD,GAAMoD,EAEX,EAAK3D,SAAS,CACVoD,MAAO5C,KA3DK,EA+DpBoD,YAAc,SAACrD,EAAIpB,GACf,IAAMqB,EAAO,EAAKF,MAAM8C,MAClBO,EAAanD,EAAKD,GAExBoD,EAAW5C,KAAO5B,EAClBqB,EAAKD,GAAMoD,EAEX,EAAK3D,SAAS,CACVoD,MAAO5C,KApEX,EAAKF,MAAQ,CACT4C,SAAU,GACVE,MAAO,CACH,CACI7C,GAAI,EACJQ,KAAM,aACNE,MAAM,KATF,E,sEA4EhB,OACI,kBAAC,IAAMG,SAAP,KACI,kBAAC,EAAD,MACA,yBAAK/C,UAAWwF,IAAcC,SAC1B,yBAAKzF,UAAWwF,IAAcd,eAC1B,kBAAC,EAAD,MACA,yBAAK1E,UAAWwF,IAAcE,MAC1B,kBAAC,EAAD,CACI9E,cAAeD,KAAKsE,cACpBpE,YAAY,WACZC,MAAOH,KAAKsB,MAAM4C,WACtB,kBAAC,EAAD,CAAQ5D,WAAY,GAAIK,cAAeX,KAAKgE,YAInB,IAA5BhE,KAAKsB,MAAM8C,MAAM3C,OAChB,oDACA,kBAAC,EAAD,CACEkC,SAAU3D,KAAKsB,MAAM8C,MACrBpB,gBAAiBhD,KAAKuE,cACtB7C,cAAe1B,KAAK4E,YACpBnC,OAAQzC,KAAK0E,iB,GAlGbjF,IAAMC,WCCnBsF,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.038422d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskItem\":\"taskItem_taskItem__8hRjb\",\"taskItem__events\":\"taskItem_taskItem__events__2SEBX\",\"taskItem__checkbox\":\"taskItem_taskItem__checkbox__1Vbqn\",\"taskItem__name\":\"taskItem_taskItem__name__2-xbU\",\"taskItem__done\":\"taskItem_taskItem__done__2n6s7\",\"taskItem__edit\":\"taskItem_taskItem__edit__kMS5v\",\"taskItem__delete\":\"taskItem_taskItem__delete__bsakb\",\"edit\":\"taskItem_edit__3Ihyb\",\"edit__field\":\"taskItem_edit__field__3tfAx\",\"edit__events\":\"taskItem_edit__events__3vkeb\",\"edit__close\":\"taskItem_edit__close__1B_0W\",\"edit__confirm\":\"taskItem_edit__confirm__1gw7D\",\"edit__error\":\"taskItem_edit__error__UhW3B\",\"edit__errorShow\":\"taskItem_edit__errorShow__3rDPf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoContainer_wrapper__3fFGC\",\"TodoContainer\":\"TodoContainer_TodoContainer__3918G\",\"flex\":\"TodoContainer_flex__1xBjO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__3fn4i\",\"header__title\":\"header_header__title__2lBLG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1jPs1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textField\":\"TextField_textField__3ghkn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskList\":\"taskList_taskList__4OS-v\"};","import React from 'react';\nimport classes from './header.module.scss';\n\nexport default class Header extends React.Component {\n    constructor (props) {\n        super();\n    }\n\n    render () {\n        return (\n            <header className={classes.header}>\n                <span className={classes.header__title}>ToDo List</span>\n            </header>\n        )\n    }\n}","import React from 'react';\nimport title from './Title.module.scss';\n\nconst Title = () => (\n    <h1 className={title.title}>ToDo List</h1>\n);\n\nexport default Title;","import React from 'react';\nimport textField from './TextField.module.scss';\n\nclass TextField extends React.Component {\n    constructor (props) {\n        super();\n    }\n\n    render () {\n        return (\n            <div className={textField.textField}>\n                <input \n                    onChange={this.props.onChangeField} \n                    placeholder={this.props.placeholder}\n                    value={this.props.value}/>\n            </div>\n        )\n    }\n} \n\nexport default TextField;","import React, {Component} from 'react';\nimport buttonClass from './Button.module.scss';\n\nexport default class Button extends Component {\n    constructor (props) {\n        super();\n    }\n\n    render () {\n        const styles = {\n            marginLeft: this.props.marginLeft + 'px'\n        }\n\n        return (\n            <button \n                className={buttonClass.button} \n                style={styles}\n                onClick={this.props.addEventClick}\n            >Add post</button>\n        )\n    }\n}","import React from 'react';\nimport item from './taskItem.module.scss';\n\nimport TextField from '../TextField/TextField';\nexport default class TaskItem extends React.Component {\n    constructor (props) {\n        super();\n        \n        this.state = {\n            editFieldValue: '',\n            showTaskItem: true,\n            error: false\n        }\n    }\n\n    editValue = (event) => {\n        const value = event.target.value;\n        \n        this.setState({\n            editFieldValue: value\n        });\n    }\n\n    fadeEditBlock = () => {\n        this.setState({\n            showTaskItem: true\n        });\n    }\n\n    confirmEditBlock = () => {\n        const newValue = this.state.editFieldValue;\n        const id = this.props.task.id;\n\n        if (newValue.length > 1) {\n            this.props.onEditElement(id, newValue);\n\n            this.setState({\n                showTaskItem: true\n            });\n        } else {\n            this.setState({\n                error: true\n            });\n\n            setTimeout(() => {\n                this.setState({\n                    error: false\n                });\n            }, 5000);\n        }\n    }\n\n    editItem = () => {\n        const valueEdit = this.props.task.name;\n\n        this.setState({\n            editFieldValue: valueEdit,\n            showTaskItem: false\n        });\n    }\n\n    render () {\n        const checkedClass = this.props.task.done ? item.taskItem__done : '';\n\n        return (\n            <React.Fragment>\n                {   this.state.showTaskItem\n                    ? <div className={item.taskItem}>\n                        <div className={item.taskItem__checkbox}>\n                            <input \n                                type=\"checkbox\" \n                                checked={this.props.task.done} \n                                onChange={this.props.onDone.bind(this, this.props.task.id)}/>\n                        </div>\n                        <div className={[item.taskItem__name, checkedClass].join(' ')}>\n                            { this.props.task.name }\n                        </div>\n                        <div className={item.taskItem__events}>\n                            <span\n                                className={item.taskItem__edit}\n                                onClick={this.editItem}>\n                                    <i className=\"fa fa-edit\"></i>\n                                </span>\n                            <span \n                                className={item.taskItem__delete}\n                                onClick={() => this.props.onDeleteElement(this.props.task.id)}\n                            ><i className=\"fa  fa-trash-o\"></i></span>\n                        </div>\n                    </div>\n\n                    :   <div className={item.edit}>\n                            <div className={item.edit__field}>\n                                <TextField \n                                    onChangeField={this.editValue} \n                                    placeholder=\"New Task\"\n                                    value={this.state.editFieldValue}/>\n                                <span className={[item.edit__error, this.state.error ? item.edit__errorShow : ''].join(' ')}>Name must contain more than one character</span>\n                            </div>\n                            <div className={item.edit__events}>\n                                <span \n                                    className={item.edit__close}\n                                    onClick={this.fadeEditBlock}\n                                >\n                                    <i className=\"fa fa-close\" />\n                                </span>\n                                <span \n                                    className={item.edit__confirm}\n\n                                    onClick={this.confirmEditBlock}\n                                >\n                                    <i className=\"fa fa-check-circle\" />\n                                </span>\n                            </div>\n                        </div>\n                }\n            </React.Fragment>\n        )\n    }\n}","import React from 'react';\nimport list from './taskList.module.scss';\n\nimport TaskItem from '../TaskItem/TaskItem';\n\nexport default class TaskList extends React.Component {\n    constructor (props) {\n        super();\n    }\n\n    render () {\n        return (\n            <div className={list.taskList}>\n                { this.props.listTask.map((task, index) => {\n                    return (\n                        <TaskItem \n                            key={index} \n                            task={task} \n                            onDeleteElement={this.props.onDeleteElement}\n                            onEditElement={this.props.onEditElement}\n                            onDone={this.props.onDone}/>\n                    )\n                })}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport todoContainer from './TodoContainer.module.scss';\n\nimport Header from '../Header/Header';\nimport Title from '../Title/Title';\nimport TextField from '../TextField/TextField';\nimport Button from '../Button/Button';\nimport TaskList from '../TaskList/TaskList';\n\nclass TodoContainer extends React.Component {\n    constructor (props) {\n        super();\n\n        this.state = {\n            nameTask: '',\n            tasks: [\n                {\n                    id: 0,\n                    name: 'valueField',\n                    done: false\n                }\n            ]\n        }\n    }\n\n    addPost = () => {\n        const valueField = this.state.nameTask;\n        const myTask = [...this.state.tasks];\n\n        if (valueField.length > 0) {\n            myTask.push({\n                id: myTask.length,\n                name: valueField,\n                done: false\n            })\n\n            this.setState({\n                tasks: myTask,\n                nameTask: ''\n            })\n        }\n    }\n\n    onChangeValue = (event) => {\n        const value = event.target.value;\n\n        this.setState({\n            nameTask: value\n        })\n    }\n\n    deleteElement = (id) => {\n       const myNewTask = this.state.tasks;\n\n       myNewTask.splice(id, 1);\n\n       this.setState({\n           tasks: myNewTask\n       })\n    }\n\n    doneTask = (id) => {\n        const task = this.state.tasks;\n        const changeTask = task[id];\n\n        changeTask.done = !changeTask.done;\n        task[id] = changeTask;\n\n        this.setState({\n            tasks: task\n        })\n    }\n\n    editElement = (id, value) => {\n        const task = this.state.tasks;\n        const changeTask = task[id];\n\n        changeTask.name = value;\n        task[id] = changeTask;\n\n        this.setState({\n            tasks: task\n        })\n    }\n\n    render () {\n        return (\n            <React.Fragment>\n                <Header />\n                <div className={todoContainer.wrapper}>\n                    <div className={todoContainer.TodoContainer}>\n                        <Title />\n                        <div className={todoContainer.flex}>\n                            <TextField \n                                onChangeField={this.onChangeValue} \n                                placeholder=\"New Task\"\n                                value={this.state.nameTask}/>\n                            <Button marginLeft={10} addEventClick={this.addPost} />\n                        </div>\n                    </div>\n\n                    {   (this.state.tasks.length === 0) \n                        ? <span>No tasks, add them</span>\n                        : <TaskList \n                            listTask={this.state.tasks} \n                            onDeleteElement={this.deleteElement}\n                            onEditElement={this.editElement}\n                            onDone={this.doneTask}    \n                          />\n                    }\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default TodoContainer;","import React from 'react';\nimport './App.css';\nimport TodoContainer from './components/TodoContainer/TodoContainer';\n\nfunction App() {\n  return (\n    <TodoContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}